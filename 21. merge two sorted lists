class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
   
        if(l1==NULL) return l2;
    
        if(l2==NULL) return l1;
    
    ListNode* dummy=new ListNode(-500);
    ListNode* head=dummy;
        
    while(l1!=NULL && l2!=NULL){
        if(l1->val<=l2->val){
            ListNode* newnode = new ListNode(l1->val);
            head->next=newnode;
            l1=l1->next;
         }
        else{
            ListNode* newnode = new ListNode(l2->val);
            head->next=newnode;
            l2=l2->next;
        }
        head=head->next;
    }
    head->next=(l1!=NULL) ? l1 : l2;
        
    return dummy->next;
}


//Using O(1) extra space
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if(l1==NULL) return l2;
    if(l2==NULL) return l1;
    ListNode* dummy=new ListNode();
    ListNode* p=dummy;
    while(l1!=NULL && l2!=NULL){
        if(l1->val<=l2->val){
            p->next=l1;
            l1=l1->next;
        }
        else{
            p->next=l2;
            l2=l2->next;
        }
        p=p->next;
    }
    p->next=(l1!=NULL) ? l1 : l2;
    return dummy->next;
}   
};
/*  TC= O(l1+l2) 
   SC = O(1)
*/


Using recursion
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL){
			return l2;
		}
		if(l2 == NULL){
			return l1;
		}        
		if(l1->val < l2->val){
			l1->next = mergeTwoLists(l1->next, l2);
			return l1;
		}
		else{
			l2->next = mergeTwoLists(l1, l2->next);
			return l2;            
    }
    }
};
