class Solution {
public:
    ListNode* sortListUtil(ListNode* head,int l,int r){
        if(l<r){
            int mid=(l+r)/2;
            ListNode* LHead=head;
            ListNode* curr=head;
            int diff=mid-l;
            while(diff){
                diff--;
                curr=curr->next;
            }
            ListNode* RHead=curr->next;
            curr->next=nullptr;
            ListNode* left=sortListUtil(LHead,l,mid);
            ListNode* right=sortListUtil(RHead,mid+1,r);
            ListNode* merged=mergeTwoLists(left,right);
            return merged;
        }
        ListNode* curr=head;
        if(curr==nullptr) return nullptr;
        curr->next=nullptr;
        return curr;
    }
    
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==nullptr && list2==nullptr) return nullptr;
        if(list1==nullptr) return list2;
        if(list2==nullptr) return list1;
        ListNode* l1=list1;
        ListNode* l2=list2;
        ListNode* nH=new ListNode(-1);
        ListNode* nC=nH;
        while(l1!=nullptr && l2!=nullptr){
            if((l1->val)<(l2->val)){
                ListNode* curr=l1;
                l1=l1->next;
                nC->next=curr;
                nC=curr;
            }else{
                ListNode* curr=l2;
                l2=l2->next;
                nC->next=curr;
                nC=curr;
            }
        }
        if(l1==nullptr){
            nC->next=l2;
        }else if(l2==nullptr){
            nC->next=l1;
        }
        return nH->next;
    }
    
    
    ListNode* sortList(ListNode* head) {
         int count=0;
        
        ListNode* curr=head;
        while(curr!=nullptr){
            count++;
            curr=curr->next;
        }
        return sortListUtil(head,0,count-1);
    }
};
