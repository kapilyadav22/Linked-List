class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return head;
        
        ListNode* fast= head;
        ListNode* slow= head;
        
        while(fast->next && fast->next->next)
        {
            fast=fast->next->next;
            slow= slow->next;
        }
    ListNode* list2 = slow->next;
    slow->next=NULL;
    ListNode* list1 = head;
        
       ListNode* left = sortList(list1);
       ListNode* right = sortList(list2);
    ListNode* answer = mergeTwoLists(left,right);
        return answer;
        
    }
     ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==nullptr && list2==nullptr) return nullptr;
        if(list1==nullptr) return list2;
        if(list2==nullptr) return list1;
        ListNode* l1=list1;
        ListNode* l2=list2;
        ListNode* nH=new ListNode(-1);
        ListNode* nC=nH;
        while(l1!=nullptr && l2!=nullptr){
            if((l1->val)<(l2->val)){
                ListNode* curr=l1;
                l1=l1->next;
                nC->next=curr;
                nC=curr;
            }else{
                ListNode* curr=l2;
                l2=l2->next;
                nC->next=curr;
                nC=curr;
            }
        }
        if(l1==nullptr){
            nC->next=l2;
        }else if(l2==nullptr){
            nC->next=l1;
        }
        return nH->next;
    }
    
};
