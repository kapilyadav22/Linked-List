class Solution {
public:
    
    ListNode* reverseList(ListNode* head) {
        ListNode* prev=NULL;
        ListNode* current = head;
        ListNode* Temp= NULL;
      
      while(current!=NULL)
      {
         Temp= current->next;
         current->next= prev;
          prev= current;
        current=Temp;
      }
      return prev;
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummynode = new ListNode(-1);
        
        l1 = reverseList(l1);
        l2=reverseList(l2);
        
     /*   if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
       dummynode will handle this case
       */ 
                
        ListNode* result = dummynode;
        int carry =0;
        while(l1 && l2)
        {   int ans = (l1->val + l2->val)+carry;
                     
         carry = (ans>9)? 1:0;
          ans = ans%10;
         
            ListNode* newnode = new ListNode(ans);
             dummynode->next = newnode;
             dummynode= dummynode->next;
            l1=l1->next;
            l2=l2->next;
        }
        
        while(l1 || l2)
        {    
             int ans= l1? l1->val +carry:  l2->val +carry;   
            carry = (ans>9)? 1:0;
            ans = ans%10;
            
        ListNode* newnode2 = new ListNode(ans);
        dummynode->next = newnode2;
        dummynode= dummynode->next;
            if(l1)
            l1=l1->next;
            else
            l2=l2->next;
        }
     
      if(carry!=0)
      { ListNode* unitnode = new ListNode(carry);
        dummynode->next = unitnode;
        dummynode= dummynode->next;
      }
        
        result = reverseList(result->next);
        return result;
    }
        
        

};
